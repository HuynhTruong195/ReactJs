
ES6 (ECMAScript 2015) l√† phi√™n b·∫£n JavaScript ƒë∆∞·ª£c c·∫≠p nh·∫≠t l·ªõn ƒë·∫ßu ti√™n k·ªÉ t·ª´ ES5

‚úÖüß† 1. let v√† const ‚Äì Khai b√°o bi·∫øn m·ªõi trong JS

    Tr∆∞·ªõc ES6:
    var name = "Alice"; // C√≥ th·ªÉ khai b√°o l·∫°i, d·ªÖ g√¢y l·ªói

    V·ªõi ES6:
    let age = 25;      // C√≥ th·ªÉ g√°n l·∫°i (thay ƒë·ªïi)
    const name = "Alice"; // Kh√¥ng th·ªÉ g√°n l·∫°i

    üîó Trong React:

    const [count, setCount] = useState(0); // count l√† const (d√π set l·∫°i b·∫±ng h√†m)

‚úÖüß† 2. Arrow Function (=>)(H√†m m≈©i t√™n)
    Tr∆∞·ªõc ES6:

    function sayHello(name) {
    return "Hello " + name;
    }
    V·ªõi ES6:

    const sayHello = (name) => `Hello ${name}`;

    üîó Trong React:, th∆∞·ªùng d√πng arrow function cho c√°c handler nh∆∞ onClick={() => doSomething()}.
        <button onClick={() => handleClick(user.id)}>Click</button>



‚úÖ üß† 3. Template Literals (Chu·ªói m·∫´u)
Cho ph√©p nh√∫ng bi·∫øn v√†o chu·ªói b·∫±ng ${}.

    const name = "Alice";
    console.log(`Hello, ${name}`);


‚úÖ üß† 4. Destructuring (Ph√¢n r√£) R√∫t g·ªçn vi·ªác l·∫•y d·ªØ li·ªáu
Object:
    const user = { name: "Bob", age: 30 };
    const { name, age } = user;

Array:
    const arr = [1, 2, 3];
    const [a, b] = arr; // a = 1, b = 2
    üí° Gi·∫£i th√≠ch:
    Gi√∫p vi·∫øt code ng·∫Øn g·ªçn, d·ªÖ hi·ªÉu.

    R·∫•t h·ªØu √≠ch khi l√†m vi·ªác v·ªõi props trong React.

üîó Trong React:

    const UserCard = ({ name, email }) => <p>{name} - {email}</p>;;


‚úÖüß† 5. Default Parameters

ƒê·∫∑t gi√° tr·ªã m·∫∑c ƒë·ªãnh cho tham s·ªë trong h√†m.
üí°Tr√°nh l·ªói khi tham s·ªë b·ªã undefined.

    const greet = (name = "Guest") => {
        console.log(`Hi, ${name}`);
    };
    
    greet(); // "Hi, Guest"


‚úÖ üß† 6. Spread (...) v√† Rest (...) ‚Äì M·ªü r·ªông & gom l·∫°i
üí° Gi·∫£i th√≠ch:
    ... c√≥ 2 nghƒ©a:

    Spread: M·ªü r·ªông array/object.

    Rest: Gom c√°c ph·∫ßn c√≤n l·∫°i th√†nh array.

    Trong React, th∆∞·ªùng d√πng ƒë·ªÉ:

    Truy·ªÅn ...props.

    C·∫≠p nh·∫≠t state: setState(prev => ({...prev, updated: true})).


 ‚û§ ‚úÖ Spread Operator (...) ‚Äì "Tr·∫£i ra" d·ªØ li·ªáu
 D√πng ƒë·ªÉ tr·∫£i (m·ªü r·ªông) c√°c ph·∫ßn t·ª≠ trong m·∫£ng ho·∫∑c object v√†o n∆°i c·∫ßn nhi·ªÅu ph·∫ßn t·ª≠, nh∆∞:
    Khi sao ch√©p
    Khi k·∫øt h·ª£p
    Khi th√™m m·ªõi ph·∫ßn t·ª≠

        // Spread

    üìå V√≠ d·ª• v·ªõi Array:   
    const nums1 = [1, 2, 3];
    const nums2 = [...nums1, 4, 5];  // [1, 2, 3, 4, 5]
    ‚Üí ...nums1 tr·∫£i c√°c ph·∫ßn t·ª≠ trong nums1 v√†o m·∫£ng m·ªõi.


    üìå V√≠ d·ª• v·ªõi Object:
    const user = { name: "Anna", age: 25 };
    const newUser = { ...user, city: "Hanoi" };
    // newUser = { name: "Anna", age: 25, city: "Hanoi" }
    ‚Üí ...user sao ch√©p t·∫•t c·∫£ key-value t·ª´ user, sau ƒë√≥ th√™m ho·∫∑c ghi ƒë√®.


    üìå Trong React:
    C·∫≠p nh·∫≠t state m·ªôt ph·∫ßn:
    setUser(prev => ({ ...prev, name: "New Name" }));

    Truy·ªÅn props ƒë·ªông:
    const props = { id: 1, name: "React" };
    <Component {...props} />



 ‚û§‚úÖ Rest Parameter (...) ‚Äì "Thu gom" ph·∫ßn c√≤n l·∫°i
 D√πng trong ƒë·ªãnh nghƒ©a h√†m, ƒë·ªÉ gom nhi·ªÅu tham s·ªë c√≤n l·∫°i th√†nh m·ªôt m·∫£ng.
    // Rest

    üìå V√≠ d·ª• c∆° b·∫£n:
        const sum = (...nums) => {
        return nums.reduce((a, b) => a + b, 0);
        };

        sum(1, 2, 3); // => 6
        ‚Üí ...nums gom t·∫•t c·∫£ tham s·ªë truy·ªÅn v√†o th√†nh m·∫£ng [1, 2, 3].

    üìå Rest trong destructuring:

        const { name, ...others } = { name: "Anna", age: 25, city: "HN" };
        // name = "Anna"
        // others = { age: 25, city: "HN" }
        ‚Üí ...others gom ph·∫ßn c√≤n l·∫°i sau khi l·∫•y name.

        
 üìå Nh·ªõ nh∆∞ sau:
        Spread ‚Üí d√πng ƒë·ªÉ copy/k·∫øt h·ª£p/ghi ƒë√®
        
        "Tr·∫£i ra" gi√° tr·ªã
        
        Rest ‚Üí d√πng ƒë·ªÉ gom l·∫°i c√°c gi√° tr·ªã
        
        "Thu v√†o" th√†nh m·∫£ng/object



‚úÖüß† 7. Object Property Shorthand
Gi√∫p vi·∫øt object g·ªçn h∆°n khi t√™n key v√† bi·∫øn tr√πng nhau.

    const name = "Anna";
    const user = { name }; // t∆∞∆°ng ƒë∆∞∆°ng { name: name }


‚úÖüß† 8. Modules ‚Äì export v√† import
T√°ch code th√†nh file. R·∫•t quan tr·ªçng trong React.

        // math.js
        export const add = (a, b) => a + b;

        // main.js
        import { add } from './utils.js';

        üí° Gi·∫£i th√≠ch:
        D·ªÖ t·ªï ch·ª©c code, d·ªÖ b·∫£o tr√¨.
        
        React c≈©ng d√πng import ƒë·ªÉ load component, hook, function...

‚úÖüß† 9. Class
D√πng ƒë·ªÉ t·∫°o component d·∫°ng class (tr∆∞·ªõc ƒë√¢y trong React), ho·∫∑c l√†m vi·ªác v·ªõi OOP.


    class Person {
    constructor(name) {
        this.name = name;
    }

    sayHi() {
        console.log(`Hi, I'm ${this.name}`);
    }
    }

    const p = new Person("Linh");
    p.sayHi();  // "Hi, I'm Linh"
    üí° Gi·∫£i th√≠ch:
    D√πng ƒë·ªÉ ƒë·ªãnh nghƒ©a ƒë·ªëi t∆∞·ª£ng c√≥ c·∫•u tr√∫c r√µ r√†ng.
    Tr∆∞·ªõc ƒë√¢y, React component vi·∫øt b·∫±ng class (tr∆∞·ªõc khi c√≥ Hooks).


‚úÖ üß†10. Promises v√† async / await ‚Äì L√†m vi·ªác v·ªõi API d·ªÖ h∆°n

Qu·∫£n l√Ω x·ª≠ l√Ω b·∫•t ƒë·ªìng b·ªô ‚Äî r·∫•t quan tr·ªçng khi fetch API trong React.

    const fetchData = async () => {
        const res = await fetch('/api/data');
        const data = await res.json();
        console.log(data);
    };
    üí° Gi·∫£i th√≠ch:
    Gi√∫p vi·∫øt code b·∫•t ƒë·ªìng b·ªô (API, server...) d·ªÖ ƒë·ªçc h∆°n.
    
    await ch·ªâ d√πng trong h√†m async.
    
  

                üéÅ  T·ªïng K·∫øt 
    T√≠nh nƒÉng               	Ghi nh·ªõ nhanh

    let / const	                Khai b√°o bi·∫øn chu·∫©n

    Arrow Function          	H√†m ng·∫Øn + gi·ªØ this

    Template Literal           	Chu·ªói d·ªÖ ƒë·ªçc

    Destructuring	            R√∫t g·ªçn khi l·∫•y data

    Spread/Rest	                  X·ª≠ l√Ω m·∫£ng/object si√™u ti·ªán

    Default Param	             Tham s·ªë m·∫∑c ƒë·ªãnh, ch·ªëng l·ªói

    Object Shorthand	            Vi·∫øt object g·ªçn

    Modules	                    T√°ch file, d√πng import/export

    Class	                 D√πng cho OOP / component c≈©

    async/await         	G·ªçi API d·ªÖ ƒë·ªçc, tr√°nh .then() l·ªìng
